# Name of the GitHub Actions Workflow
name: Github Actions Playground

# Trigger the workflow on push events for Python files
on:
  push:
    paths:
      - "**.py" # Run the workflow only if the committed files include Python files

# Define the jobs to be run by the workflow
jobs:
  # Job for linting the code
  Linting:
    # Conditionally execute this job when commit message includes '/lint'
    if: contains(github.event.head_commit.message, '/lint') 
    runs-on: ubuntu-latest
    steps:
      # Check out the repository code
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Set up the specified Python version
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Install linting and formatting tools
      - name: Install Dependencies
        run: |
          pip install flake8 black

      # Run Flake8 for style guide enforcement
      - name: Run Flake8
        run: |
          flake8 . || echo "Flake8 reported issues."
        continue-on-error: true

      # Check and auto-format code with Black
      - name: Auto-format with Black
        run: |
          # Use environment file to set outputs
          if black . --check; then
            echo "black_formatted=false" >> $GITHUB_OUTPUT
          else
            black .
            echo "black_formatted=true" >> $GITHUB_OUTPUT
          fi
        id: black_format

      # Commit and push formatted code, if any changes were made
      - name: Commit and Push if Changes were Made
        if: steps.black_format.outputs.black_formatted == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git add .
          git commit -m "Apply black formatting"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job to check out the code and create an artifact of the codebase
  Checkout_Code:
    needs: Linting
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.time }} # Pass timestamp for artifact naming
    steps:
      # Check out repository code
      - name: Checkout Code
        uses: actions/checkout@v4

      # Generate a timestamp for artifact naming
      - name: Get Timestamp
        id: timestamp
        run: echo "time=$(date +%s)" >> $GITHUB_OUTPUT

      # Archive the checked-out code as an artifact
      - name: Archive Code
        uses: actions/upload-artifact@v4
        with:
          name: repo-code-${{ steps.timestamp.outputs.time }}
          path: .

  # Job for performing exploratory operations, depends on Linting job
  Exploring:
    needs: Linting
    runs-on: ubuntu-latest
    steps:
      - name: Greeting
        run: echo "Hello, World!"

      - name: Trigger Info
        run: echo "This action was triggered by a ${{ github.event_name }}"

  # Job for publishing the project, depends on Checkout_Code and Exploring jobs
  Publish:
    needs: [Checkout_Code, Exploring]
    runs-on: ubuntu-latest
    steps:
      # Download the code artifact
      - name: Download Code
        uses: actions/download-artifact@v4
        with:
          name: repo-code-${{ needs.Checkout_Code.outputs.timestamp }}

      # Placeholder steps for publishing logic
      - name: Publish Start
        run: echo "Publishing the project"
      - name: Publish Completion
        run: echo "Publish complete"
